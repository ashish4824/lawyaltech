const winston = require("winston");

// Configure Winston Logger
const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message, ...meta }) => {
      return `${timestamp} ${level}: ${message} ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''}`;
    })
  ),
  transports: [
    new winston.transports.Console()
  ],
});

const requestLogger = (req, res, next) => {
  // Capture the original send function
  const originalSend = res.send;
  
  // Log the request
  logger.info({
    message: "Incoming request",
    method: req.method,
    url: req.originalUrl
  });

  // Override send
  res.send = function (body) {
    logger.info({
      message: "Outgoing response",
      method: req.method,
      url: req.originalUrl,
      statusCode: res.statusCode,
      responseBody: body
    });
    
    // Call the original send
    return originalSend.call(this, body);
  };

  next();
};

// Middleware to log warnings (e.g., deprecated features, resource limits)
const warningLogger = (warning) => {
  logger.warn({
    message: warning.message || "Warning",
    code: warning.code || "UNKNOWN_WARNING",
    details: warning.details || {},
    timestamp: new Date().toISOString()
  });
};

// Example usage of warning logger:
// warningLogger({
//   message: "API version 1 is deprecated",
//   code: "DEPRECATED_API",
//   details: { version: "1.0", newVersion: "2.0" }
// });

// Middleware to log errors
const errorLogger = (err, req, res, next) => {
  logger.error({
    message: err.message,
    stack: err.stack,
    method: req.method,
    url: req.originalUrl,
    headers: req.headers,
  });
  res.status(500).json({ error: "Internal Server Error" });
};

module.exports = {
  requestLogger,
  errorLogger,
  warningLogger,
  logger,
};
